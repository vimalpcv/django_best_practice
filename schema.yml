openapi: 3.0.3
info:
  title: Django Syntax
  version: 1.0.0
  description: Best Practice for Django project
paths:
  /:
    get:
      operationId: root_retrieve
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /login/:
    post:
      operationId: login_create
      description: Login API
      parameters:
      - in: query
        name: from_date
        schema:
          type: string
      - in: query
        name: release
        schema:
          type: string
          format: date
        description: Filter by release date
        examples:
          Example1:
            value: '1993-08-23'
            summary: short optional summary
            description: longer description
      - in: query
        name: to_date
        schema:
          type: string
          format: date
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyResponse'
            examples:
              Article2:
                value:
                - title: A title
                - title: Another title
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyResponse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyResponse'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
              examples:
                Article2:
                  value:
                  - title: A title
                  - title: Another title
          description: ''
  /logout/:
    post:
      operationId: logout_create
      tags:
      - logout
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /refresh/:
    post:
      operationId: refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Article:
      type: object
      properties:
        title:
          type: string
      required:
      - title
    GenderEnum:
      enum:
      - MALE
      - FEMALE
      - OTHERS
      type: string
      description: |-
        * `MALE` - MALE
        * `FEMALE` - FEMALE
        * `OTHERS` - OTHERS
    MyResponse:
      type: object
      properties:
        field1:
          type: string
        field2:
          type: integer
      required:
      - field1
      - field2
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
        emp_id:
          type: string
          maxLength: 10
        gender:
          $ref: '#/components/schemas/GenderEnum'
        organization:
          type: integer
          nullable: true
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - emp_id
      - id
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://127.0.0.1:8000
  description: Development server
- url: http://127.0.0.1:8000
  description: Staging server
